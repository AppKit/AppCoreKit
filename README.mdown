# AppCoreKit

AppCoreKit is an application framework designed to improve productivity while creating Apps for iOS. This is the result of a 3 years experience at Wherecloud and is a production framework that shipped more than 20 apps.

AppCoreKit do not offers out of the box UI components but the technology to help you:

* Manage your data
* Automatic serialization (KeyValue Store, Core Data)
* Type and data structure conversions
* Network
* View controllers and containers
* Ui vs. Models synchronization
* Appearance customization
* Responsive view layouts
* Forms
* Maps
* Objective-C runtime apis 
* And more.

Keep in mind that AppCoreKit is a toolbox. It is non intrusive so that you can cherry pick features and learn how to use it at your own pace.

Screen Cast and high level description of the framework are available at http://www.appcorekit.net

## Compiling the framework

AppCoreKit is built as a Static Framework. Static Framework are not natively supported by Xcode and requires some additional specifications to get compiled properly.

Copy the following file:

<pre>./static Frameworks.xcspec</pre>

To:

<pre>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Specifications</pre>
And
<pre>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/Library/Xcode/Specifications</pre>


## Compiling the API Documentation

AppCoreKit provides a "Documentation" target that generate a docset using the public header files and the additional programming guides in the Documentation folder. This target is a script base on "appledoc". To install appledoc, follow the installation procedure here : https://github.com/tomaz/appledoc

## Using AppCoreKit

* <b>Drag'n'drop</b> the AppCoreKit project in your workspace or as a subproject in Xcode.

* Adds the AppCoreKit.framework <b>link dependency on your target</b> in the build phases settings.

* Add the following <b>frameworks and libraries dependencies</b> to your project in the build phases settings: 
<pre>
libstdc++.dylib, 
UIKit, 
Foundation, 
CoreGraphics, 
AddressBook, 
CoreData, 
QuartzCore, 
CoreLocation, 
MapKit, 
MediaPlayer, 
CoreFoundation, 
CFNetwork, 
SystemConfiguration, 
MobileCoreServices, 
AdSupport.
</pre>

* Add the following <b>link flags</b> in your build settings (<b>OTHER_LDFLAGS</b>) : 
<pre>
 -ObjC -all_load -lxml2 -licucore -lz -weak_library /usr/lib/libstdc++.dylib
</pre>

* As Xcode do not natively support static frameworks especially for resources, you'll need to add a post build phase if you'd like to use some components. In the build phase for your target, add a <b>"Run Script" build phase</b> and add the following script :

<pre>
YOUR_FRAMEWORKS_PATH="$PROJECT_DIR/../../Frameworks/"
sh "$YOUR_FRAMEWORKS_PATH/copy_framework_resources.sh" 
        --system-developer-dir "$SYSTEM_DEVELOPER_DIR" 
        --executable-name "$EXECUTABLE_NAME" 
        --frameworks-dir "$YOUR_FRAMEWORKS_PATH" 
        --target-build-dir "$TARGET_BUILD_DIR" 
        --project "$PROJECT" 
        --project-dir "$PROJECT_DIR"
</pre>

## Credits

If you have any comments, suggestions, question or information request, please contact us at appcorekitsupport@wherecloud.com.

## License

Copyright 2009-2013 WhereCloud, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
   
